version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/python:3.9
      - image: tensorflow/tensorflow:latest
      - image: circleci/postgres:11.5
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: isac

    working_directory: ~/isac

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.9/site-packages
      - restore_cache:
          keys: 
            - dep1-{{ checksum "Pipfile.lock" }}
            - dep1-

      - run:
          name: install dockerize 
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 2m

      - run:
          name: Install global dotenv, pipenv and Setup DATABASE_URL
          command: |
            pip install --upgrade pip
            pip3 install --user python-dotenv
            sudo pip install pipenv
          environment:
            # Note: Make sure to also set DATABASE_URL in circleci env variables
            DATABASE_URL: postgresql://root@localhost/isac?sslmode=disable
            PIPENV_VENV_IN_PROJECT: 1

      - run:
          name: Install & setup pipenv packages
          command: |
            pipenv install
            pipenv run install-client

      - save_cache:
          key: dep1-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.9/site-packages"

      - run:
          name: Running Migration
          command: |
            pipenv run python manage.py migrate

      - run:
          name: Check System
          command: |
            pipenv run python manage.py check

      - run:
          name: Run Unit Tests
          command: |
            pipenv run python manage.py test --debug-mode --debug-sql --parallel

      - run:
          name: Running Server
          background: true
          command: |
            pipenv run python manage.py runserver

      - run:
          name: run a deploy job trigger
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -X GET ${DOMAIN}/pull?password=${PASSWORD}
            fi

workflows:
  version: 2
  notify_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - staging